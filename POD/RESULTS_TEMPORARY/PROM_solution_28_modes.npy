import numpy as np
import os
import sys

def compute_prom_solution(U_modes, At, nTimeSteps, u0, uxa, E, mu2, fem_burgers, save_dir, num_modes):
    # Compute the PROM solution using the given modes
    U_PROM = fem_burgers.pod_prom_burgers(At, nTimeSteps, u0, uxa, E, mu2, U_modes, projection="LSPG")
    
    # Save the PROM solution
    solution_filename = os.path.join(save_dir, f"PROM_solution_{num_modes}_modes.npy")
    np.save(solution_filename, U_PROM)
    print(f'Saved PROM solution for {num_modes} modes to {solution_filename}.')

if __name__ == '__main__':
    # Load all snapshot files from the training_data directory
    snapshot_files = [f for f in os.listdir("../../FEM/training_data") if f.endswith('.npy') and f.startswith('simulation_')]
    
    all_snapshots = []
    for file in snapshot_files:
        snapshots = np.load(os.path.join("../../FEM/training_data", file))
        all_snapshots.append(snapshots)
    
    # Stack all snapshots
    all_snapshots = np.hstack(all_snapshots)

    # Compute the SVD of the fluctuation field
    U, s, _ = np.linalg.svd(all_snapshots, full_matrices=False)

    # Define the number of modes to retain
    num_modes = 28

    # Domain and mesh settings for PROM solution
    a = 0
    b = 100
    m = int(256 * 2)
    X = np.linspace(a, b, m + 1)
    T = np.array([np.arange(1, m + 1), np.arange(2, m + 2)]).T

    # Initial condition
    u0 = np.ones_like(X)

    # Boundary conditions
    uxa = 4.76  # u(0,t) = 4.3

    # Time discretization and numerical diffusion
    Tf = 35
    At = 0.07
    nTimeSteps = int(Tf / At)
    E = 0.01

    # Parameter mu2
    mu2 = 0.0182

    # Create an instance of the FEMBurgers class
    parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../FEM/'))
    sys.path.append(parent_dir)
    from fem_burgers import FEMBurgers
    fem_burgers = FEMBurgers(X, T)

    # Directory to save results
    save_dir = "rom_solutions"
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    # Compute and save the PROM solution for 28 modes
    compute_prom_solution(U[:, :num_modes], At, nTimeSteps, u0, uxa, E, mu2, fem_burgers, save_dir, num_modes)

    print("Simulation with 28 modes completed and saved.")
